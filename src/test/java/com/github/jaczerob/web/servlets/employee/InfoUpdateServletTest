package com.github.jaczerob.web.servlets.employee;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Map;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.jaczerob.project1.exceptions.RecordNotExistsException;
import com.github.jaczerob.project1.models.users.Employee;
import com.github.jaczerob.project1.services.UserService;
import com.github.jaczerob.project1.web.servlets.employee.InfoUpdateServlet;

public class InfoUpdateServletTest {
    InfoUpdateServlet infoUpdateServlet;
    ServletConfig config;
    ServletContext context;
    HttpServletRequest req;
    HttpServletResponse resp;
    HttpSession session;
    UserService userService;
    InputStream inputStream;
    BufferedReader bufferedReader;
    
    int gotStatus;
    StringWriter sw;
    PrintWriter pw;
    ObjectMapper mapper;

    @Before
    public void init() throws IOException, ServletException {
        infoUpdateServlet = Mockito.spy(new InfoUpdateServlet());
        userService = Mockito.mock(UserService.class);
        config = Mockito.mock(ServletConfig.class);
        context = Mockito.mock(ServletContext.class);
        req = Mockito.mock(HttpServletRequest.class);
        resp = Mockito.mock(HttpServletResponse.class);
        session = Mockito.mock(HttpSession.class);
        bufferedReader = Mockito.mock(BufferedReader.class);

        
        gotStatus = -1;
        sw = new StringWriter();
        pw = new PrintWriter(sw);
        mapper = new ObjectMapper();

        Mockito.doReturn(config).when(infoUpdateServlet).getServletConfig();
        Mockito.doReturn(context).when(infoUpdateServlet).getServletContext();
        Mockito.when(context.getAttribute("userService")).thenReturn(userService);
        Mockito.when(context.getAttribute("objectMapper")).thenReturn(mapper);
        Mockito.when(req.getSession(true)).thenReturn(session);
        infoUpdateServlet.init();
        
        Mockito.when(resp.getWriter()).thenReturn(pw);

        Mockito.doAnswer(new Answer<Void>() {
            @Override
            public Void answer(InvocationOnMock invocation) throws Throwable {
                Object[] args = invocation.getArguments();
                Integer responseStatus = (Integer) args[0];
                gotStatus = responseStatus;
                return null;
            }
        }).when(resp).setStatus(Mockito.anyInt());
    }

    @Test
    public void testInfoUpdateSuccess() throws ServletException, IOException {
        int wantStatus = HttpServletResponse.SC_OK;

        Employee employee = new Employee(1, "email", "username", "password");
        Mockito.when(session.getAttribute("user")).thenReturn(employee);
        
        Employee newEmployeeDetails = new Employee(1, "newEmail", "newPassword", "newPassword");
        Mockito.when(req.getParameter("username")).thenReturn(newEmployeeDetails.getUsername());
        Mockito.when(req.getParameter("password")).thenReturn(newEmployeeDetails.getPassword());
        Mockito.when(req.getParameter("email")).thenReturn(newEmployeeDetails.getEmail());
        Mockito.when(bufferedReader.readLine()).thenReturn(String.format("username=%s&password=%s&email=%s", employee.getUsername(), employee.getPassword(), employee.getEmail()));

        infoUpdateServlet.doPatch(req, resp);

        pw.flush();
        Map<String, String> response = mapper.readValue(sw.toString(), new TypeReference<Map<String, String>>() {});
        Assert.assertEquals("Your information has been updated. To view your information, invoke the /info endpoint.", response.get("message"));
        Assert.assertEquals(wantStatus, gotStatus);
        Assert.assertEquals(employee, newEmployeeDetails);
    }

    @Test
    public void testInfoUpdateNoUpdateResponse() throws ServletException, IOException {
        int wantStatus = HttpServletResponse.SC_OK;

        Mockito.when(req.getParameter("username")).thenReturn(null);
        Mockito.when(req.getParameter("password")).thenReturn(null);
        Mockito.when(req.getParameter("email")).thenReturn(null);
        Mockito.when(bufferedReader.readLine()).thenReturn("");

        infoUpdateServlet.doPatch(req, resp);

        pw.flush();
        Map<String, String> response = mapper.readValue(sw.toString(), new TypeReference<Map<String, String>>() {});
        Assert.assertEquals("You did not specify any username, email, or password to update, so nothing was updated.", response.get("message"));
        Assert.assertEquals(wantStatus, gotStatus);
    }

    @Test
    public void testInfoUpdateServerError() throws ServletException, IOException, RecordNotExistsException {
        int wantStatus = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;

        Employee employee = new Employee(1, "email", "username", "password");
        Mockito.when(session.getAttribute("user")).thenReturn(employee);
        
        Employee newEmployeeDetails = new Employee(1, "newEmail", "newPassword", "newPassword");
        Mockito.when(req.getParameter("username")).thenReturn(newEmployeeDetails.getUsername());
        Mockito.when(req.getParameter("password")).thenReturn(newEmployeeDetails.getPassword());
        Mockito.when(req.getParameter("email")).thenReturn(newEmployeeDetails.getEmail());
        Mockito.when(bufferedReader.readLine()).thenReturn(String.format("username=%s&password=%s&email=%s", employee.getUsername(), employee.getPassword(), employee.getEmail()));
        Mockito.doThrow(RecordNotExistsException.class).when(userService).updateUser(Mockito.any());
        
        infoUpdateServlet.doPatch(req, resp);

        pw.flush();
        Map<String, String> response = mapper.readValue(sw.toString(), new TypeReference<Map<String, String>>() {});
        Assert.assertEquals("Sorry, there was an internal server error. Please try again later.", response.get("message"));
        Assert.assertEquals(wantStatus, gotStatus);
    }
}
